usethis::use_mit_license()
?usethis::use_mit_license()
?usethis::use_mit_license("Paweł Morgen")
usethis::use_mit_license("Paweł Morgen")
install.packages('xgboost')
install.packages('xgboost')
?xgboost::xgboost
data("Seatbelts")
data(agaricus.train, pacakge = "xgboost")
data(agaricus.train, package = "xgboost")
library(xgboost)
dtrain <- xgb.DMatrix(agaricus.train$data, label = agaricus.train$label)
param <- list(objective = "binary:logistic")
bst <- xgb.train(param, dtrain)
bst <- xgb.train(param, dtrain, 2)
View(bst)
View(agaricus.train$data)
?xgboost
?xgb.attr
?xgb.model.dt.tree
xgb.model.dt.tree(model = bst)
xgb.model.dt.tree(model = bst, use_int_id = TRUE)
bst <- xgb.train(param, dtrain, 5)
xgb.model.dt.tree(model = bst, use_int_id = TRUE)
?agaricus.test
?agaricus.train
View(agaricus.train$data)
View(as.matrix(agaricus.train$data))
View(bst)
?xgboost
?xgb.model.dt.tree
xgb.model.dt.tree(model = bst, trees = 4, use_int_id = TRUE)
library(testthat)
agaricus.train$data$Dimnames
agaricus.train$data@Dimnames[[2]]
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(bst, trees = nrounds - 1, use_int_id = TRUE)
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
class(model_dt)
model_dt
model_dt[Node = 0]
?`[.data.table`
model_dt[Node = 0, Feature]
model_dt[Node=0, Feature]
model_dt[Node == 0, Feature]
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
result <- list()
rec_search <- function(id, history){
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
append(result, history)
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
result
}
constitute_feat_combos(bst)
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
result <- list()
rec_search <- function(id, history){
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
result <- append(result, history)
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
result
}
constitute_feat_combos(bst)
constitute_feat_combos(bst)
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
result <- list()
rec_search <- function(id, history){
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
result <- append(result, history)
print(result)
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
result
}
constitute_feat_combos(bst)
?get
?`<-`
?assign
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
temp_env <- rlang::new_environment()
assign("result", list(), envir = temp_env)
rec_search <- function(id, history){
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
assign("result", append(get("result", envir = temp_env), history), envir = temp_env)
print(result)
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
result
}
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
temp_env <- rlang::new_environment()
assign("result", list(), envir = temp_env)
rec_search <- function(id, history){
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
assign("result", append(get("result", envir = temp_env), history), envir = temp_env)
print(result)
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
get("result", envir = temp_env)
}
constitute_feat_combos(bst)
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
temp_env <- rlang::new_environment()
assign("result", list(), envir = temp_env)
rec_search <- function(id, history){
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
assign("result", append(get("result", envir = temp_env), history), envir = temp_env)
print(get("result", envir = temp_env))
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
get("result", envir = temp_env)
}
constitute_feat_combos(bst)
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
temp_env <- rlang::new_environment()
assign("result", list(), envir = temp_env)
rec_search <- function(id, history){
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
assign("result", append(get("result", envir = temp_env), history), envir = temp_env)
# print(get("result", envir = temp_env))
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
get("result", envir = temp_env)
}
constitute_feat_combos(bst)
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
temp_env <- rlang::new_environment()
assign("result", list(), envir = temp_env)
rec_search <- function(id, history){
print(history)
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
assign("result", append(get("result", envir = temp_env), history), envir = temp_env)
# print(get("result", envir = temp_env))
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
# get("result", envir = temp_env)
}
constitute_feat_combos(bst)
View(constitute_feat_combos(bst))
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
temp_env <- rlang::new_environment()
assign("result", list(), envir = temp_env)
rec_search <- function(id, history){
# print(history)
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
assign("result", append(get("result", envir = temp_env), history), envir = temp_env)
# print(get("result", envir = temp_env))
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
get("result", envir = temp_env)
}
View(constitute_feat_combos(bst))
l <- list()
append(l, LETTERS[1:3])
append(l, as.list(LETTERS[1:3]))
append(l, list(LETTERS[1:3]))
append(l, list(LETTERS[1:3])) -> l1
l1[[1]]
class(l1[[1]])
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
temp_env <- rlang::new_environment()
assign("result", list(), envir = temp_env)
rec_search <- function(id, history){
# print(history)
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
assign("result", append(get("result", envir = temp_env), list(history)), envir = temp_env)
# print(get("result", envir = temp_env))
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
get("result", envir = temp_env)
}
View(constitute_feat_combos(bst))
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
temp_env <- rlang::new_environment()
assign("result", list(), envir = temp_env)
rec_search <- function(id, history){
# print(history)
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
assign("result", append(get("result", envir = temp_env), list(history)), envir = temp_env)
print(get("result", envir = temp_env))
return()
}
history <- c(history, current_feature)
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, character(0))
get("result", envir = temp_env)
}
View(constitute_feat_combos(bst))
constitute_feat_combos(bst)
View(constitute_feat_combos(bst))
constitute_feat_combos(bst) -> l
class(l)
l[[1]]
View(l)
unique(l)
model_dt
unique(l)
?unique
?identical
model_dt
#' Constitute Feature Combinations
#'
#' @return a list of vectors of feature names
#' @noRd
constitute_feat_combos <- function(bst){
nrounds <- bst$niter
model_dt <- xgb.model.dt.tree(model = bst, trees = nrounds - 1, use_int_id = TRUE)
temp_env <- rlang::new_environment()
assign("result", list(), envir = temp_env)
rec_search <- function(id, history){
# print(history)
# history - vector
# id - id of current node
current_feature <- model_dt[Node == id, Feature]
if(current_feature == 'Leaf'){
assign("result", append(get("result", envir = temp_env), list(history)), envir = temp_env)
# print(get("result", envir = temp_env))
return()
}
history <- rbind(history, data.frame(Feature = current_feature,
Split = model_dt[Node == id, Split]))
rec_search(model_dt[Node == id, Yes], history)
rec_search(model_dt[Node == id, No], history)
}
rec_search(0, data.frame(Feature = character(0),
Split = numeric(0)))
get("result", envir = temp_env)
}
constitute_feat_combos(bst)
?xgb.model.dt.tree
constitute_feat_combos(bst) -> l
unique(l)
as.matrix(agaricus.train$data)$`odor=none`
as.matrix(agaricus.train$data)[,`odor=none`]
as.matrix(agaricus.train$data)[,"odor=none"]
library(autofeat)
l
l[[1]]$Feature
library(autofeat)
constitute_feat_combos(bst)
?remove
rm(constitute_feat_combos())
rm(constitute_feat_combos)
library(autofeat)
autofeat:::constitute_feat_combos(bst)
debug(autofeat:::constitute_feat_combos)
autofeat:::constitute_feat_combos(bst)
history
?history
autofeat:::constitute_feat_combos(bst)
autofeat:::constitute_feat_combos(bst)
model_dt
id
model_dt[,Feature]
remove(model_dt)
autofeat:::constitute_feat_combos(bst)
model_dt[,Feature]
library(autofeat)
autofeat:::constitute_feat_combos(bst)
autofeat:::constitute_feat_combos(bst)
library(autofeat)
debug(autofeat:::constitute_feat_combos)
autofeat:::constitute_feat_combos(bst)
class(model_dt)
model_dt[,Feature]
library(autofeat)
library(autofeat)
library(autofeat)
data.table::`[`
?data.table::`[`
?`[.data.table`
library(autofeat)
library(autofeat)
library(autofeat)
list(NULL, 1, 3, NULL) -> l
which(is.null(l))
is.null(l)
?combn
combn(1:5, 2)
combn(1:5, 2, simplify = FALSE)
formals(`+`)
formals(max)
